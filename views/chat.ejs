<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Chat Screen</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css">
  <style>
    body {
      font-family: 'Arial', sans-serif;
      background-color: #f0f0f0;
    }

    .chat-container {
      max-width: 800px;
      margin: 0 auto;
      margin-top: 50px;
      padding: 20px;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .chat-messages {
      height: 400px;
      overflow-y: scroll;
      margin-bottom: 20px;
      padding: 10px;
      border: 1px solid #e0e0e0;
      border-radius: 10px;
    }

    .message {
      margin-bottom: 10px;
    }

    .message.user {
      text-align: right;
    }

    .message.ai {
      text-align: left;
      background-color: #f1f1f1;
      border-radius: 10px;
      padding: 10px;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .message p {
      display: inline-block;
      padding: 10px;
      border-radius: 10px;
      max-width: 60%;
    }

    .message.user p {
      background-color: #007bff;
      color: white;
    }

    .message.ai p {
      background-color: #d8d6d6;
    }

    .typing-indicator {
      display: inline-block;
      width: 7px;
      height: 7px;
      background-color: #474747;
      border-radius: 50%;
      margin-right: 5px;
      animation: typing 0.8s infinite;
    }

    @keyframes typing {
      0% {
        transform: translateY(0);
      }

      50% {
        transform: translateY(-5px);
      }

      100% {
        transform: translateY(0);
      }
    }

    .terminal {
      background-color: #1e1e1e;
      color: #c3c8c3;
      font-family: 'Courier New', Courier, monospace;
      padding: 10px;
      border-radius: 5px;
      margin-top: 10px;
      white-space: pre-wrap;
    }

    .control-panel {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }

    .control-panel button {
      margin: 0 5px;
      padding: 5px 10px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
    }

    .control-panel button:disabled {
      background-color: #cccccc;
      cursor: not-allowed;
    }
  </style>
</head>

<body>
  <div class="chat-container">
    <h1 class="text-2xl font-bold mb-4">AI Chat Screen</h1>
    <div id="chat-messages" class="chat-messages">
      <!-- Messages will be appended here -->
    </div>
    <form id="chat-form" class="flex">
      <input id="user-input" type="text" class="flex-1 p-2 border rounded-l-lg" placeholder="Type your message..."
        required>
      <button type="submit" class="p-2 bg-blue-500 text-white rounded-r-lg">Send</button>
    </form>
    <div class="control-panel">
      <button id="decrease-speed">Slow Down</button>
      <button id="increase-speed">Speed Up</button>
    </div>
  </div>

  <script>
    let typingSpeed = 80; // Default typing speed in milliseconds

    document.getElementById('chat-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const userInput = document.getElementById('user-input').value.trim();
      if (!userInput) return;

      addMessage('user', userInput);
      document.getElementById('user-input').value = '';

      addTypingIndicator();
      try {
        const response = await fetch('https://auth-api-31e2.onrender.com/api/chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ message: userInput }),
        });

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        removeTypingIndicator();
        simulateTyping('ai', data.reply);
      } catch (error) {
        console.error('Error fetching data:', error);
        removeTypingIndicator();
        // Optionally, provide feedback to the user about the error
        // Example: alert('Failed to send message. Please try again later.');
      }
    });

    document.getElementById('increase-speed').addEventListener('click', () => {
      if (typingSpeed > 10) typingSpeed -= 10; // Increase speed
    });

    document.getElementById('decrease-speed').addEventListener('click', () => {
      if (typingSpeed < 200) typingSpeed += 10; // Decrease speed
    });

    function addMessage(sender, text) {
      const messageContainer = document.createElement('div');
      messageContainer.classList.add('message', sender);

      const messageContent = document.createElement('p');
      messageContent.textContent = text;

      messageContainer.appendChild(messageContent);
      document.getElementById('chat-messages').appendChild(messageContainer);
      document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
    }

    function addTypingIndicator() {
      const typingIndicator = document.createElement('div');
      typingIndicator.classList.add('message', 'ai');
      typingIndicator.id = 'typing-indicator';
      typingIndicator.innerHTML = '<p><span class="typing-indicator"></span><span class="typing-indicator"></span><span class="typing-indicator"></span></p>';

      document.getElementById('chat-messages').appendChild(typingIndicator);
      document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
    }

    function removeTypingIndicator() {
      const typingIndicator = document.getElementById('typing-indicator');
      if (typingIndicator) {
        typingIndicator.remove();
      }
    }

    function simulateTyping(sender, text) {
      if (!text) {
        console.error('Received undefined or empty text to simulate typing.');
        return;
      }

      const messageContainer = document.createElement('div');
      messageContainer.classList.add('message', sender);

      // Check if the message contains code
      const isCode = text.includes('```');

      if (isCode) {
        const codeContainer = document.createElement('pre');
        codeContainer.classList.add('terminal');
        const codeText = text.replace(/```/g, ''); // Remove backticks
        messageContainer.appendChild(codeContainer);

        let index = 0;
        function typeChar() {
          if (index < codeText.length) {
            codeContainer.textContent += codeText.charAt(index);
            index++;
            setTimeout(typeChar, typingSpeed);
          } else {
            document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
          }
        }
        typeChar();
      } else {
        const formattedText = formatText(text);
        messageContainer.innerHTML = formattedText;

        let index = 0;
        const chars = messageContainer.textContent.split('');
        messageContainer.textContent = '';

        function typeChar() {
          if (index < chars.length) {
            messageContainer.textContent += chars[index];
            index++;
            setTimeout(typeChar, typingSpeed);
          } else {
            document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
          }
        }
        typeChar();
      }

      document.getElementById('chat-messages').appendChild(messageContainer);
      document.getElementById('chat-messages').scrollTop = document.getElementById('chat-messages').scrollHeight;
    }

    function formatText(text) {
      const lines = text.split('\n');
      let html = '';

      lines.forEach(line => {
        if (line.startsWith('*')) {
          const content = line.substring(1).trim();
          html += `<ul><li>${content}</li></ul>`;
        } else {
          html += `<p>${line}</p>`;
        }
      });

      return html;
    }
  </script>
</body>

</html>
